AWSTemplateFormatVersion: "2010-09-09"
Description: Enhanced CloudFormation stack for high availability, fault tolerance, and disaster recovery with existing functionalities.

Resources:
  # S3 Buckets with Versioning and Cross-Region Replication
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: input1-sreeni1
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: output1-sreeni1
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3TranscribePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::input1-sreeni1/*
                  - !Sub arn:aws:s3:::output1-sreeni1/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                Resource: "*"

  # Lambda Function for Transcription
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyTranscribeFunction
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import time

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              transcribe = boto3.client('transcribe')

              body = json.loads(event['body'])
              source_bucket = body['source_bucket']
              source_key = body['source_key']
              destination_bucket = 'output1-sreeni1'
              
              job_name = source_key.split('.')[0] + '_transcription'
              job_uri = f's3://{source_bucket}/{source_key}'
              transcribe.start_transcription_job(
                  TranscriptionJobName=job_name,
                  Media={'MediaFileUri': job_uri},
                  MediaFormat='mp3',
                  LanguageCode='en-US',
                  OutputBucketName=destination_bucket
              )

              while True:
                  status = transcribe.get_transcription_job(TranscriptionJobName=job_name)
                  if status['TranscriptionJob']['TranscriptionJobStatus'] in ['COMPLETED', 'FAILED']:
                      break
                  time.sleep(5)

              if status['TranscriptionJob']['TranscriptionJobStatus'] == 'COMPLETED':
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Transcription completed successfully!')
                  }
              else:
                  return {
                      'statusCode': 500,
                      'body': json.dumps('Transcription failed.')
                  }
      Runtime: python3.8
      Timeout: 300

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApiGateway

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: transcribe
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource: "*"

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*"